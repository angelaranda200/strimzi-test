apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaNodePool
metadata:
  name: dual-role
  labels:
    strimzi.io/cluster: my-cluster
spec:
  replicas: 1
  roles:
    - controller
    - broker
  storage:
    type: jbod
    volumes:
      - id: 0
        type: persistent-claim
        size: 2Gi
---
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: my-cluster
  annotations:
    strimzi.io/node-pools: enabled
    strimzi.io/kraft: enabled
spec:
  kafka:
    version: 3.7.0
    replicas: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: external2
        port: 9094
        tls: true
        type: ingress
        authentication:
          type: tls
        configuration:
          bootstrap:
            host: kafka-bootstrap.products-ms4m.com
            # annotations:
            #   kubernetes.io/ingress.class: nginx
          brokers:
          - broker: 0
            host: kafka-broker-0.products-ms4m.com
            # annotations:
            #   kubernetes.io/ingress.class: nginx            
          - broker: 1
            host: kafka-broker-1.products-ms4m.com
          class: nginx
            # annotations:
            #   kubernetes.io/ingress.class: nginx
    authorization:
      type: simple
      superUsers:
        - my-user
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
    storage:
      type: jbod
      volumes:
        - id: 0
          type: persistent-claim
          size: 2Gi
          deleteClaim: false
  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 2Gi
      deleteClaim: false
  entityOperator:
    userOperator: {}
    topicOperator: {}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: my-user
  labels:
    strimzi.io/cluster: my-cluster
spec:
  authentication:
    type: tls
  authorization:
    type: simple
    acls:
      # Example ACL rules for consuming from my-topic using consumer group my-group
      - resource:
          type: topic
          name: my-topic
          patternType: literal
        operations:
          - Describe
          - Read
          - Write
        host: "*"
      - resource:
          type: group
          name: my-group
          patternType: literal
        operations:
          - Read
          - Describe
          - Write
        host: "*"
      # Example ACL rules for producing to topic my-topic
      - resource:
          type: topic
          name: my-topic
          patternType: literal
        operations:
          - Create
          - Describe
          - Write
        host: "*"
      - resource:
          type: group
          name: my-group
          patternType: literal
        operations:
          - Read
          - Describe
          - Write
        host: "*"