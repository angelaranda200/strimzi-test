apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: c4m-kafka-cluster
  namespace: kafka
spec:
  kafka:
    version: 3.7.0
    replicas: 1
    logging:
      type: inline
      loggers:
        kafka.root.logger.level: "INFO"
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: external
        port: 9094
        type: ingress
        tls: true
        configuration:
          bootstrap:
            host: kafka-bootstrap.products-ms4m.com
            annotations:
              ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          brokers:
          - broker: 0
            host: kafka-broker-0.products-ms4m.com
            annotations:
              ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          - broker: 1
            host: kafka-broker-1.products-ms4m.com
            annotations:
              ingress.kubernetes.io/ssl-passthrough: "true"
              nginx.ingress.kubernetes.io/backend-protocol: HTTPS
              nginx.ingress.kubernetes.io/ssl-passthrough: "true"
          class: nginx
    authorization:
      type: simple
      superUsers:
        - c4m-kafka-admin
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
      default.replication.factor: 1
      min.insync.replicas: 1
      inter.broker.protocol.version: "3.7"
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 2Gi
        deleteClaim: true
  zookeeper:
    replicas: 1
    storage:
      type: persistent-claim
      size: 2Gi
      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: c4m-kafka-admin
  namespace: kafka
  labels:
    strimzi.io/cluster: c4m-kafka-cluster
spec:
  authentication:
    type: tls
  authorization:
    type: simple
    acls:
      # Example ACL rules for consuming from my-topic using consumer group my-group
      - resource:
          type: topic
          name: "*"
          patternType: literal
        operation: All
        host: "*"
      - resource:
          type: group
          name: "*"
          patternType: literal
        operation: All
        host: "*"
      - resource:
          type: cluster
          name: "*"
          patternType: literal
        operation: All
        host: "*"
      - resource:
          type: transactionalId
          name: "*"
          patternType: literal
        operation: All
        host: "*"
---
apiVersion: kafka.strimzi.io/v1beta1
kind: KafkaTopic
metadata:
  name: my-topic
  namespace: kafka
  labels:
    strimzi.io/cluster: c4m-kafka-cluster
spec:
  partitions: 3
  replicas: 1